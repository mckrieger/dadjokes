@page "/search"
@using System.Text.Json
@using System.Text.Json.Serialization
@inject HttpClient Client
@rendermode InteractiveServer

<PageTitle>Search</PageTitle>

<h1>Search</h1>

<div>
  <input @bind="searchTerm" @bind:event="oninput" type="text" placeholder="Enter search term"/>
  <button class="btn btn-primary" type="button" @onclick="SubmitSearch">
    Search
  </button>
</div>
@if (isLoading)
{
    <p>Loading...</p>
}
else if (result != null && result.Short != null && result.Medium != null && result.Long != null)
{
    <p>Results:</p>
    <div class="scroll-container">
    <h3>Short</h3>
    <ul class="list-group">
        @foreach (var value in result.Short)
        {
            <li class="list-group-item">@value.Joke</li>
        }
    </ul>

    <h3>Medium</h3>
    <ul class="list-group">
        @foreach (var value in result.Medium)
        {
            <li class="list-group-item">@value.Joke</li>
        }
    </ul>

    <h3>Long</h3>
    <ul class="list-group">
        @foreach (var value in result.Long)
        {
            <li class="list-group-item">@value.Joke</li>
        }
    </ul>
    </div>
}
else if (hasError){
    <p>@errorMessage</p>
}

<style>
.scroll-container {
    max-height: 600px; /* adjust as needed */
    overflow-y: auto;
    border: 1px solid #ccc;
    border-radius: 4px;
    padding: 0.5rem;
    background-color: #f9f9f9;
}
</style>


@code {
    private string searchTerm = string.Empty;
    private JokesLengthGroupModel? result;
    private bool isLoading = false;
    private bool hasError = false;
    private string errorMessage = string.Empty;

    private async Task SubmitSearch()
    {
        isLoading = true;
        result = null;
        hasError = false;
        errorMessage = "";
        if (string.IsNullOrWhiteSpace(searchTerm)){
            isLoading = false;
            return;
        }
        try
        {
            var response = await Client.GetFromJsonAsync<JokesLengthGroupModel>($"/joke/{Uri.EscapeDataString(searchTerm)}");

            result = response;
        }
        catch (Exception ex)
        {
            hasError = true;
            errorMessage = $"Error occurred during search:\n {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    public class JokeModel
{
    public string? Id { get; set; }
    public string? Joke { get; set; }
}

public class JokesLengthGroupModel
{
    public List<JokeModel>? Short { get; set; }
    public List<JokeModel>? Medium { get; set; }
    public List<JokeModel>? Long { get; set; }

    public JokesLengthGroupModel() {}
    public JokesLengthGroupModel(List<JokeModel> shortList, List<JokeModel> mediumList, List<JokeModel> longList)
    {
        Short = shortList;
        Medium = mediumList;
        Long = longList;
    }
}
}
